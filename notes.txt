// Backend (server.js)// Backend (server.js)// Backend (server.js)
// Backend (server.js)
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth');
const albumRoutes = require('./routes/albums');

dotenv.config();
const app = express();
app.use(express.json());
app.use(cors());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB Connected'))
    .catch(err => console.log(err));

app.use('/api/auth', authRoutes);
app.use('/api/albums', albumRoutes);

app.listen(5000, () => console.log('Server running on port 5000'));

// Models (User.js)
const mongoose = require('mongoose');
const UserSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true }
});
module.exports = mongoose.model('User', UserSchema);

// Models (Album.js)
const AlbumSchema = new mongoose.Schema({
    title: String,
    artist: String,
    genre: String,
    releaseYear: Number,
    ratings: [{ user: mongoose.Schema.Types.ObjectId, rating: Number }]
});
module.exports = mongoose.model('Album', AlbumSchema);

// Authentication Routes (auth.js)
const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const router = express.Router();

router.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) return res.status(400).json({ message: 'Email already in use' });

        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ username, email, password: hashedPassword });
        await user.save();
        res.status(201).json({ message: 'User registered successfully!' });
    } catch (error) {
        res.status(500).json({ message: 'Server error' });
    }
});

router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await User.findOne({ email });
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }
        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
        res.json({ token, user: { id: user._id, username: user.username, email: user.email } });
    } catch (error) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;

// Albums Routes (albums.js)
const router = express.Router();
const Album = require('../models/Album');
const authMiddleware = require('../middleware/auth');

router.post('/add', authMiddleware, async (req, res) => {
    const album = new Album(req.body);
    await album.save();
    res.json({ message: 'Album added!' });
});

router.get('/', async (req, res) => {
    const albums = await Album.find();
    res.json(albums);
});

module.exports = router;

// Middleware (auth.js)
const jwt = require('jsonwebtoken');
module.exports = (req, res, next) => {
    const token = req.header('Authorization');
    if (!token) return res.status(401).json({ message: 'Access denied' });
    try {
        const verified = jwt.verify(token, process.env.JWT_SECRET);
        req.user = verified;
        next();
    } catch (error) {
        res.status(400).json({ message: 'Invalid token' });
    }
};
